package zero_one_matrix

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

type TestCaseDataSet struct {
	answer [][]int
	mat    [][]int
}

func BenchmarkUpdateMatrix(b *testing.B) {

	for i := 0; i < b.N; i++ {
		for _, data := range getTestDataSet() {
			updateMatrix(data.mat)
		}
	}
}

func TestBenchmarkUpdateMatrix(t *testing.T) {
	for _, data := range getTestDataSet() {
		assert.Equal(t, data.answer, updateMatrix(data.mat))
	}
}

func getTestDataSet() []TestCaseDataSet {

	return []TestCaseDataSet{
		{[][]int{{0, 0, 0}, {0, 1, 0}, {0, 0, 0}}, [][]int{{0, 0, 0}, {0, 1, 0}, {0, 0, 0}}},
		{[][]int{{0, 0, 0}, {0, 1, 0}, {1, 2, 1}}, [][]int{{0, 0, 0}, {0, 1, 0}, {1, 1, 1}}},
		{
			[][]int{
				{9, 8, 7, 6, 5, 4, 3, 2, 1, 0},
			},
			[][]int{
				{1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
			},
		},
		{
			[][]int{
				{1, 0, 1, 1, 0, 0, 1, 0, 0, 1},
				{0, 1, 1, 0, 1, 0, 1, 0, 1, 1},
				{0, 0, 1, 0, 1, 0, 0, 1, 0, 0},
				{1, 0, 1, 0, 1, 1, 1, 1, 1, 1},
				{0, 1, 0, 1, 1, 0, 0, 0, 0, 1},
				{0, 0, 1, 0, 1, 1, 1, 0, 1, 0},
				{0, 1, 0, 1, 0, 1, 0, 0, 1, 1},
				{1, 0, 0, 0, 1, 2, 1, 1, 0, 1},
				{2, 1, 1, 1, 1, 2, 1, 0, 1, 0},
				{3, 2, 2, 1, 0, 1, 0, 0, 1, 1},
			},
			[][]int{
				{1, 0, 1, 1, 0, 0, 1, 0, 0, 1},
				{0, 1, 1, 0, 1, 0, 1, 0, 1, 1},
				{0, 0, 1, 0, 1, 0, 0, 1, 0, 0},
				{1, 0, 1, 0, 1, 1, 1, 1, 1, 1},
				{0, 1, 0, 1, 1, 0, 0, 0, 0, 1},
				{0, 0, 1, 0, 1, 1, 1, 0, 1, 0},
				{0, 1, 0, 1, 0, 1, 0, 0, 1, 1},
				{1, 0, 0, 0, 1, 1, 1, 1, 0, 1},
				{1, 1, 1, 1, 1, 1, 1, 0, 1, 0},
				{1, 1, 1, 1, 0, 1, 0, 0, 1, 1},
			},
		},
		{
			[][]int{
				{19, 19, 19},
				{18, 18, 18},
				{17, 17, 17},
				{16, 16, 16},
				{15, 15, 15},
				{14, 14, 14},
				{13, 13, 13},
				{12, 12, 12},
				{11, 11, 11},
				{10, 10, 10},
				{9, 9, 9},
				{8, 8, 8},
				{7, 7, 7},
				{6, 6, 6},
				{5, 5, 5},
				{4, 4, 4},
				{3, 3, 3},
				{2, 2, 2},
				{1, 1, 1},
				{0, 0, 0},
			},
			[][]int{
				{1, 1, 1},
				{1, 1, 1},
				{1, 1, 1},
				{1, 1, 1},
				{1, 1, 1},
				{1, 1, 1},
				{1, 1, 1},
				{1, 1, 1},
				{1, 1, 1},
				{1, 1, 1},
				{1, 1, 1},
				{1, 1, 1},
				{1, 1, 1},
				{1, 1, 1},
				{1, 1, 1},
				{1, 1, 1},
				{1, 1, 1},
				{1, 1, 1},
				{1, 1, 1},
				{0, 0, 0},
			},
		},
	}
}
